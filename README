Http server:

High-level Approach:
We built this http server based on a socket waiting  for client to connect and send request. To make sure the
performance, we created a cache along with this http server. In this project, path in the url from the request should
the identifier of the resource the server responses. So we named the cache of a request by hashing its path, and kept it
 in the /cache directory. When receiving a request from client, this http server will check if there is a cached
 response for this request. If there is, response with the cache. If not, it will continue the request the resource from
  the origin server. On getting response from the origin server, send it back to the client, and cache it for further
  request.

Performance Enhancing Techniques:
- Since we kept the cache of each resource in a file, and put it in the /cache directory. In order to improve cache
hits, we used gzip to compress the cache file, trying to cache as much as possible in the limited size of 10MB.
- We used LFU (least frequently used) strategy to manage cache. If total caches don't exceed 10MB, simply add a new one.
 Otherwise, remove the one with the least hits, and then add. Determine which cache to remove by LRU (least recently
 used) time when they have the same least hit count.

 Challenges:
 - To estimate the size of the cache to be added, we temporarily created a cache.temp to calculate the total size of
 cache. If it's greater than 10MB, update caches by LFU prior to adding the new one.
 - To implement LFU, The server keeps track of each cache file and its hit count in a queue (in the format of a list).
 When updating caches, sort the queue stably by hit count.

DNS server:

High-level Approach:
We build this dns server based on a UDP socket. It unpacks the incoming packet from client DNS query, and pack the
outgoing packet back to client with an answer. We predefined a dictionary for EC2 hosts domains and ips for queries.
This DNS server will return the ip with the best performance in time-to-completion (TTC) for downloading a Web page of
the given domain based on the client's ip.

Performance Enhancing Techniques:
- Cache. We cached the client ip along with response ip of replica server and query timing. If exceeding the TTL, do the
 query. Otherwise, fetch the cache.
- Find the nearest replica servers to the client. Get locations of client and replica servers with the help of
https://ip-api.com/. Pick top 3 nearest for the following active measurement of TTC.
- Measure the TTC actively by scamper. Send a dummy request from the client ip used for measurement, get TTC using
scamper on the server. Find the one having the best TTC.

Challenges:
- To deal with requesting locations of replicas using api and TTC from replicas in the measurement client which take
amount of time, we used multi-threads to handle replicas concurrently for both of them.


Rouni Yin implemented
1) the DNS server including creating the response packet, cache management, active measurement for TTC 
and replica selection.
2) the HTTP server including responding with cache, requesting from origin server and cache management strategy.

Chihao Sun implemented
1）A cache replacement strategy to make sure that use an in-memory cache no larger than 10MB.
2) Test code on EC2 and cs5700cdnproject.ccs.neu.edu make sure that our project‘s functions are executable.
3) Fix the a bug of MeasureClient.py


